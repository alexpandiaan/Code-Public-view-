import xlrd   
loc = ("C:/Blended Migration/Migration_Fillsheet_v1.xlsx")
wb = xlrd.open_workbook(loc) 
sheet = wb.sheet_by_index(2)
rows = input("how many rows of data available in excel sheet\n")
var = int (rows)
dum='.0'
dot='.'
dash='-'
ANT_vlan=220
MPS1_name=sheet.cell_value(25,0)
MPS1_IP=sheet.cell_value(25,1)
MPS2_name=sheet.cell_value(26,0)
MPS2_IP=sheet.cell_value(26,1)

NGE1_name=sheet.cell_value(25,2)
NGE1_IP=sheet.cell_value(25,3)
NGE2_name=sheet.cell_value(26,2)
NGE2_IP=sheet.cell_value(26,3)

x2=sheet.cell_value(25,4)
NGE1_PS = int(x2)
x3=sheet.cell_value(26,4)
NGE2_PS = int(x3)

lt_1=sheet.cell_value(25,5)
lt_2=sheet.cell_value(26,5)

a1 = sheet.cell_value(25,6)	  
ae_1 = int(a1)
a2 =  sheet.cell_value(26,6)
ae_2 = int(a2)

i = 1
f=open("PPP-Config.txt",'w')

pruning_group = sheet.cell_value(25,10)
fslash = '/'

def getconfig(devicename,NUP_vlan,ANT_vlan):
	if devicename[0:4] =='IPMB' or devicename[0:4] =='ipmb':
		f.write(str(devicename)+"\n")
		f.write("\n")
		if ( len(NUP_vlan) <=6 ) :
			f.write("NUP vlan:"+str(NUP_vlan[:-2])+"\n")
		else :
			f.write("NUP vlan:"+str(NUP_vlan)+"\n")
		f.write("ANT vlan:"+str(ANT_vlan)+"\n")	
		f.write("# \n")
		f.write("config \n")
		f.write("\n")
		f.write("vlan "+str(ANT_vlan)+" smart\n")
		f.write("port vlan "+str(ANT_vlan)+" 0/2 1 \n")		
		f.write("port vlan "+str(ANT_vlan)+" 0/3 1 \n")	
		f.write("port vlan "+str(ANT_vlan)+" 0/2 0 \n")		
		f.write("port vlan "+str(ANT_vlan)+" 0/3 0 \n")			
		f.write("quit \n")	
		f.write("\n")
		f.write("save configuration \n")
		f.write("# \n")	
		f.write ( "Dumbo option: 7 \n")
		f.write("\n")
		f.write("##################################### \n")
		f.write("\n")
	elif devicename[0:5] =='DSLAM' or devicename[0:5] =='dslam' or devicename[0:4] =='SMPF' or devicename[0:4] =='smpf':
		f.write(str(devicename)+"\n")
		f.write("\n")
		if ( len(NUP_vlan) <=6 ) :
			f.write("NUP vlan:"+str(NUP_vlan[:-2])+"\n")
		else :
			f.write("NUP vlan:"+str(NUP_vlan)+"\n")	
		f.write("ANT vlan:"+str(ANT_vlan)+"\n")	
		f.write("# \n")
		f.write("config \n")
		f.write("\n")
		f.write("vlan "+str(ANT_vlan)+" smart\n")
		f.write("port vlan "+str(ANT_vlan)+" 0/9 2 \n")		
		f.write("port vlan "+str(ANT_vlan)+" 0/10 2 \n")
		f.write("port vlan "+str(ANT_vlan)+" 0/9 0 \n")		
		f.write("port vlan "+str(ANT_vlan)+" 0/10 0 \n")		
		f.write("quit \n")	
		f.write("\n")
		f.write("save configuration \n")
		f.write("# \n")	
		f.write ( "Dumbo option: 9\n")
		f.write("\n")
		f.write("##################################### \n")
		f.write("\n")
	elif devicename[-2] =='M' or devicename[-2] =='m':
		f.write(str(devicename)+"\n")
		f.write("\n")
		f.write("NUP vlan:"+str(NUP_vlan)+"\n")		
		f.write("ANT vlan:"+str(ANT_vlan)+"\n")	
		f.write("# \n")
		f.write("config \n")
		f.write("\n")
		f.write("vlan "+str(ANT_vlan)+" smart\n")
		f.write("port vlan "+str(ANT_vlan)+" 0/2 1 \n")		
		f.write("port vlan "+str(ANT_vlan)+" 0/3 1 \n")	
		f.write("port vlan "+str(ANT_vlan)+" 0/2 0 \n")		
		f.write("port vlan "+str(ANT_vlan)+" 0/3 0 \n")		
		f.write("quit \n")		
		f.write("save configuration \n")
		f.write("# \n")
		f.write ( "Dumbo option: 7\n")
		f.write("\n")		
		f.write("##################################### \n")
		f.write("\n")
	elif devicename[-2] =='C' or devicename[-2] =='c':
		f.write(str(devicename)+"\n")
		f.write("\n")
		f.write("NUP vlan:"+str(NUP_vlan)+"\n")		
		f.write("ANT vlan:"+str(ANT_vlan)+"\n")	
		f.write("vlan "+str(ANT_vlan)+"\n")
		f.write("# \n")	
		f.write("config t \n")
		f.write("\n")
		f.write(" interface GigabitEthernet7/1/1 \n")
		f.write("  speed 1000\n")
		f.write("  switchport mode trunk\n")
		f.write("  switchport trunk allowed vlan "+str(ANT_vlan)+"\n")
		f.write("\n")
		f.write ( "Dumbo option: 8\n")
		f.write("\n")
		f.write("##################################### \n")
		f.write("\n")
	else:
		f.write("Please Fill proper MSAN/DSLAM device name")
		
def ex4200vlancreate(devicename,ANT_vlan,port1,port2):
	f.write("set vlan "+devicename+" vlan-id "+str(ANT_vlan)+"\n")
	f.write("set protocols vstp vlan "+str(ANT_vlan)+"\n")
	if devicename[0:4] =='IPMB' or devicename[0:4] =='ipmb' or devicename[0:5] =='DSLAM' or devicename[0:5] =='dslam' or devicename[0:4] =='SMPF' or devicename[0:4] =='smpf':
		f.write("\n")
		f.write("Please add the below line after Vlan locking \n")
		f.write("\n")
		f.write("set interfaces "+str(port1)+" unit 0 family ethernet-switching vlan members "+str(ANT_vlan)+"\n")
		f.write("set interfaces "+str(port2)+" unit 0 family ethernet-switching vlan members "+str(ANT_vlan)+"\n")
	else:
		f.write("\n")
		f.write("set interfaces "+str(port1)+" unit 0 family ethernet-switching vlan members "+str(ANT_vlan)+"\n")
	f.write("\n")
	
def pruningconfig(devicename,ANT_vlan) :
	if ( fslash in pruning_group ):
		pruning_group_split=pruning_group.split("/")
		pruning_group1 = pruning_group_split[0]
		pruning_group2 = pruning_group_split[1]
		f.write("set vlan "+devicename+" apply-groups-except "+pruning_group1+"\n")
		f.write("set vlan "+devicename+" apply-groups-except "+pruning_group2+"\n")
	else:
		f.write("set vlan "+devicename+" apply-groups-except "+pruning_group+"\n")	
	
while ( i <= var ) : 
	devicename = sheet.cell_value(i,0)
	x1 = sheet.cell_value(i,1)
	NUP_vlan = str(x1)
	x2 = sheet.cell_value(i,2)
	ANT_vlan = int(x2)		
	x1 = sheet.cell_value(i,3)
	etrunk = int(x1)
	x2 = sheet.cell_value(i,4)
	ethtrunk = int(x2)
	mac=sheet.cell_value(i,5)
	GE_Port=sheet.cell_value(i,6)
	port1 = sheet.cell_value(i,9)
	port2 = sheet.cell_value(i,10)
	
	deviceconfig= getconfig(devicename,NUP_vlan,ANT_vlan)
	f.write("EX4200 SWITCH-1 configurations for "+devicename+ "\n")
	f.write("\n")
	getex4200config= ex4200vlancreate(devicename,ANT_vlan,port1,port2)
	f.write("\n")
	getpruningconfig= pruningconfig(devicename,ANT_vlan)
	f.write("\n")
	f.write("########################################################################## \n")
	f.write("\n")
	f.write("***************************MPS-1 configurations****************"+"\n")
	f.write("#"+"\n")	
	f.write("vsi vsi_" +str(ANT_vlan)+"\n")
	f.write(" pwsignal ldp "+"\n")
	f.write("  vsi-id "+str(ANT_vlan)+"\n")
	f.write("  control-word enable"+"\n")
	f.write("  peer "+str(NGE1_IP)+"\n")
	f.write("  peer "+str(NGE2_IP)+"\n")
	f.write("  protect-group vpls_"+str(ANT_vlan)+"\n")
	f.write("   protect-mode pw-redundancy master "+"\n")  
	f.write("	reroute never "+"\n")      
	f.write("   peer "+str(NGE1_IP)+" preference 1 "+"\n")
	f.write("   peer "+str(NGE2_IP)+" preference 2 "+"\n")
	f.write("   traffic-statistics enable "+"\n")
	f.write(" mtu 2000 "+"\n")
	f.write(" ignore-ac-state"+"\n")
	f.write(" mac-learning disable "+"\n")
	f.write("# "+"\n") 
	f.write("e-trunk "+str(etrunk)+"\n")
	f.write("peer-address "+str(MPS2_IP)+' source-address '+str(MPS1_IP)+"\n")
	f.write("revert disable"+"\n")
	f.write("e-trunk track bfd-session session-name bfd-inter-mps"+"\n")
	f.write("description "+devicename+"\n")
	f.write("#"+"\n")
	if devicename[0:4] =='IPMB' or devicename[0:4] =='ipmb':
		f.write("interface Eth-Trunk"+str(ethtrunk)+"\n")  
		f.write("mtu 2000 \n")
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp"+"\n")
		f.write("mac-address "+mac+"\n")
		f.write("mode lacp-static"+"\n")
		f.write("max active-linknumber 1"+"\n")
		f.write("e-trunk "+str(etrunk)+"\n")
		f.write("#"+"\n")			
	elif devicename[0:5] =='DSLAM' or devicename[0:5] =='dslam' or devicename[0:4] =='SMPF' or devicename[0:4] =='smpf':
		f.write("interface Eth-Trunk"+str(ethtrunk)+"\n")  
		f.write("mtu 2000 \n")
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp"+"\n")
		f.write("mode lacp-static"+"\n")
		f.write("max active-linknumber 1"+"\n")
		f.write("e-trunk "+str(etrunk)+"\n")
		f.write("#"+"\n")		
	elif devicename[-2] =='M' or devicename[-2] =='m':
		f.write("interface Eth-Trunk"+str(ethtrunk)+"\n")  
		f.write("mtu 2000 \n")
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp"+"\n")
		f.write("mac-address "+mac+"\n")
		f.write("mode lacp-static"+"\n")
		f.write("max active-linknumber 1"+"\n")
		f.write("e-trunk "+str(etrunk)+"\n")
		f.write("#"+"\n")
	elif devicename[-2] =='C' or devicename[-2] =='c':
		f.write("interface Eth-Trunk"+str(ethtrunk)+"\n") 
		f.write("mtu 2000 \n")			
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp"+"\n")
		f.write("e-trunk "+str(etrunk)+"\n")
		f.write("#"+"\n")
	MPS_Version = sheet.cell_value(25,7)
	if ( MPS_Version == 7 ) :
		f.write("interface Eth-Trunk"+str(ethtrunk)+dot+str(ANT_vlan)+"\n")
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp:"+"\n")
		f.write("vlan-type dot1q "+str(ANT_vlan)+"\n")
		f.write("statistic enable "+"\n")
		f.write("l2 binding vsi vsi_"+str(ANT_vlan)+"\n")
		f.write("trust upstream ttt-default inbound"+"\n")
		f.write("trust upstream ttt-default outbound"+"\n")
		f.write("trust 8021p outbound \n")
		f.write("qos-profile ttt-default-1gb outbound identifier none"+"\n")
		f.write("#"+"\n")
	elif ( MPS_Version == 9 ) :
		f.write("interface Eth-Trunk"+str(ethtrunk)+dot+str(ANT_vlan)+"\n")
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp:"+"\n")
		f.write("statistic enable "+"\n")
		f.write("encapsulation dot1q-termination\n")
		f.write("dot1q termination vid "+str(ANT_vlan)+"\n")		
		f.write("l2 binding vsi vsi_"+str(ANT_vlan)+"\n")
		f.write("trust upstream ttt-default inbound"+"\n")
		f.write("trust upstream ttt-default outbound"+"\n")
		f.write("qos-profile ttt-default-1gb outbound identifier none"+"\n")
		f.write("#"+"\n")
	f.write("interface "+str(GE_Port)+"\n")
	if devicename[0:4] =='IPMB' or devicename[0:4] =='ipmb':
		f.write("description :r="+devicename+":q=0/2/1:sev=5:t=trunk:"+"\n")		
	elif devicename[0:5] =='DSLAM' or devicename[0:5] =='dslam' or devicename[0:4] =='SMPF' or devicename[0:4] =='smpf':
		f.write("description :r="+devicename+":q=0/9/1:sev=5:t=trunk:"+"\n")
	elif devicename[-2] =='M' or devicename[-2] =='m':
		f.write("description :r="+devicename+":q=0/2/1:sev=5:t=trunk:"+"\n")
	elif devicename[-2] =='C' or devicename[-2] =='c':
		f.write("description :r="+devicename+":q=7/1/1:sev=5:t=trunk:"+"\n")
	f.write("undo shutdown"+"\n")
	f.write("eth-trunk "+str(ethtrunk)+"\n")
	f.write("undo dcn"+"\n")
	f.write("***************************MPS-2 configurations****************"+"\n")
	f.write("#"+"\n")	
	f.write("vsi vsi_" +str(ANT_vlan)+"\n")
	f.write(" pwsignal ldp "+"\n")
	f.write("  vsi-id "+str(ANT_vlan)+"\n")
	f.write("  control-word enable"+"\n")
	f.write("  peer "+str(NGE2_IP)+"\n")
	f.write("  peer "+str(NGE1_IP)+"\n")
	f.write("  protect-group vpls_"+str(ANT_vlan)+"\n")
	f.write("   protect-mode pw-redundancy master "+"\n")  
	f.write("	reroute never "+"\n")      
	f.write("   peer "+str(NGE2_IP)+" preference 1 "+"\n")
	f.write("   peer "+str(NGE1_IP)+" preference 2 "+"\n")
	f.write("   traffic-statistics enable "+"\n")
	f.write(" mtu 2000 "+"\n")
	f.write(" ignore-ac-state"+"\n")
	f.write(" mac-learning disable "+"\n")
	f.write("# "+"\n") 
	f.write("e-trunk "+str(etrunk)+"\n")
	f.write("peer-address "+str(MPS2_IP)+' source-address '+str(MPS1_IP)+"\n")
	f.write("revert disable"+"\n")
	f.write("e-trunk track bfd-session session-name bfd-inter-mps"+"\n")
	f.write("description "+devicename+"\n")
	f.write("#"+"\n")
	if devicename[0:4] =='IPMB' or devicename[0:4] =='ipmb':
		f.write("interface Eth-Trunk"+str(ethtrunk)+"\n")  
		f.write("mtu 2000 \n")
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp"+"\n")
		f.write("mac-address "+mac+"\n")
		f.write("mode lacp-static"+"\n")
		f.write("max active-linknumber 1"+"\n")
		f.write("e-trunk "+str(etrunk)+"\n")
		f.write("#"+"\n")			
	elif devicename[0:5] =='DSLAM' or devicename[0:5] =='dslam' or devicename[0:4] =='SMPF' or devicename[0:4] =='smpf':
		f.write("interface Eth-Trunk"+str(ethtrunk)+"\n")  
		f.write("mtu 2000 \n")
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp"+"\n")
		f.write("mode lacp-static"+"\n")
		f.write("max active-linknumber 1"+"\n")
		f.write("e-trunk "+str(etrunk)+"\n")
		f.write("#"+"\n")		
	elif devicename[-2] =='M' or devicename[-2] =='m':
		f.write("interface Eth-Trunk"+str(ethtrunk)+"\n")  
		f.write("mtu 2000 \n")
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp"+"\n")
		f.write("mac-address "+mac+"\n")
		f.write("mode lacp-static"+"\n")
		f.write("max active-linknumber 1"+"\n")
		f.write("e-trunk "+str(etrunk)+"\n")
		f.write("#"+"\n")
	elif devicename[-2] =='C' or devicename[-2] =='c':
		f.write("interface Eth-Trunk"+str(ethtrunk)+"\n") 
		f.write("mtu 2000 \n")			
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp"+"\n")
		f.write("e-trunk "+str(etrunk)+"\n")
		f.write("#"+"\n")
	if ( MPS_Version == 7 ) :
		f.write("interface Eth-Trunk"+str(ethtrunk)+dot+str(ANT_vlan)+"\n")
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp:"+"\n")
		f.write("vlan-type dot1q "+str(ANT_vlan)+"\n")
		f.write("statistic enable "+"\n")
		f.write("l2 binding vsi vsi_"+str(ANT_vlan)+"\n")
		f.write("trust upstream ttt-default inbound"+"\n")
		f.write("trust upstream ttt-default outbound"+"\n")
		f.write("qos-profile ttt-default-1gb outbound identifier none"+"\n")
		f.write("#"+"\n")
	elif ( MPS_Version == 9 ) :
		f.write("interface Eth-Trunk"+str(ethtrunk)+dot+str(ANT_vlan)+"\n")
		f.write("description :r="+devicename+":sev=5:p=ttt:t=lacp:"+"\n")
		f.write("statistic enable "+"\n")
		f.write("encapsulation dot1q-termination\n")
		f.write("dot1q termination vid "+str(ANT_vlan)+"\n")		
		f.write("l2 binding vsi vsi_"+str(ANT_vlan)+"\n")
		f.write("trust upstream ttt-default inbound"+"\n")
		f.write("trust upstream ttt-default outbound"+"\n")
		f.write("qos-profile ttt-default-1gb outbound identifier none"+"\n")
		f.write("#"+"\n")
	f.write("#"+"\n")
	f.write("interface "+str(GE_Port)+"\n")
	if devicename[0:4] =='IPMB' or devicename[0:4] =='ipmb':
		f.write("description :r="+devicename+":q=0/3/1:sev=5:t=trunk:"+"\n")		
	elif devicename[0:5] =='DSLAM' or devicename[0:5] =='dslam' or devicename[0:4] =='SMPF' or devicename[0:4] =='smpf':
		f.write("description :r="+devicename+":q=0/10/1:sev=5:t=trunk:"+"\n")
	elif devicename[-2] =='M' or devicename[-2] =='m':
		f.write("description :r="+devicename+":q=0/3/1:sev=5:t=trunk:"+"\n")
	elif devicename[-2] =='C' or devicename[-2] =='c':
		f.write("description :r="+devicename+":q=8/1/1:sev=5:t=trunk:"+"\n")
	f.write("undo shutdown"+"\n")
	f.write("eth-trunk "+str(ethtrunk)+"\n")
	f.write("undo dcn"+"\n")
	f.write("***********************************NGE-1 Configurations******************************************************"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE1_PS)+dum+" virtual-circuit-id "+str(ANT_vlan)+"\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE1_PS)+dum+" description :r="+MPS1_name+":q=vsi_"+str(ANT_vlan)+":v=ae"+str(ae_1)+":sev=5:t""\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE1_PS)+dum+" control-word"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE1_PS)+dum+" mtu 2000"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE1_PS)+dum+" encapsulation-type ethernet-vlan"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE1_PS)+dum+" pseudowire-status-tlv hot-standby-vc-on"+"\n")
	f.write("#"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" description :r="+MPS1_name+":q=Eth-trunk"+str(ethtrunk)+dot+str(ANT_vlan)+":v="+str(lt_1)+":sev=5:t=pw:"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" anchor-point "+str(lt_1)+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" flexible-vlan-tagging"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" auto-configure vlan-ranges dynamic-profile auto-pwht accept pppoe"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" auto-configure vlan-ranges dynamic-profile auto-pwht ranges "+str(ANT_vlan)+dash+str(ANT_vlan)+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" auto-configure remove-when-no-subscribers"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" mtu 2022"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" no-gratuitous-arp-request"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" unit 0 encapsulation ethernet-ccc"+"\n")
	f.write("#"+"\n")
	f.write("set class-of-service interfaces interface-set ps"+str(NGE1_PS)+" output-traffic-control-profile 10g-tcp"+"\n")
	f.write("#"+"\n")
	NGE1_PS += 1
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE1_PS)+dum+" virtual-circuit-id "+str(ANT_vlan)+"\n")
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE1_PS)+dum+" description :r="+MPS2_name+":q=vsi_"+str(ANT_vlan)+":v=ae"+str(ae_1)+":sev=5:t""\n")
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE1_PS)+dum+" control-word"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE1_PS)+dum+" mtu 2000"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE1_PS)+dum+" encapsulation-type ethernet-vlan"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE1_PS)+dum+" pseudowire-status-tlv hot-standby-vc-on"+"\n")
	f.write("#"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" description :r="+MPS2_name+":q=Eth-trunk"+str(ethtrunk)+dot+str(ANT_vlan)+":v="+str(lt_1)+":sev=5:t=pw:"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" anchor-point "+str(lt_1)+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" flexible-vlan-tagging"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" auto-configure vlan-ranges dynamic-profile auto-pwht accept pppoe"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" auto-configure vlan-ranges dynamic-profile auto-pwht ranges "+str(ANT_vlan)+dash+str(ANT_vlan)+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" auto-configure remove-when-no-subscribers"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" mtu 2022"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" no-gratuitous-arp-request"+"\n")
	f.write("set interfaces ps"+str(NGE1_PS)+" unit 0 encapsulation ethernet-ccc"+"\n")
	f.write("#"+"\n")
	f.write("set interfaces "+str(lt_1)+" hierarchical-scheduler implicit-hierarchy"+"\n")
	f.write("set class-of-service interfaces interface-set ps"+str(NGE1_PS)+" output-traffic-control-profile 10g-tcp"+"\n")  
	f.write("\n")
	f.write("***********************************NGE-2 Configurations******************************************************"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE2_PS)+dum+" virtual-circuit-id "+str(ANT_vlan)+"\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE2_PS)+dum+" description :r="+MPS1_name+":q=vsi_"+str(ANT_vlan)+":v=ae"+str(ae_2)+":sev=5:t""\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE2_PS)+dum+" control-word"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE2_PS)+dum+" mtu 2000"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE2_PS)+dum+" encapsulation-type ethernet-vlan"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS1_IP+" interface ps"+str(+NGE2_PS)+dum+" pseudowire-status-tlv hot-standby-vc-on"+"\n")
	f.write("#"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" description :r="+MPS1_name+":q=Eth-trunk"+str(ethtrunk)+dot+str(ANT_vlan)+":v="+str(lt_2)+":sev=5:t=pw:"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" anchor-point "+str(lt_2)+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" flexible-vlan-tagging"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" auto-configure vlan-ranges dynamic-profile auto-pwht accept pppoe"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" auto-configure vlan-ranges dynamic-profile auto-pwht ranges "+str(ANT_vlan)+dash+str(ANT_vlan)+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" auto-configure remove-when-no-subscribers"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" mtu 2022"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" no-gratuitous-arp-request"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" unit 0 encapsulation ethernet-ccc"+"\n")
	f.write("#"+"\n")
	f.write("set class-of-service interfaces interface-set ps"+str(NGE2_PS)+" output-traffic-control-profile 10g-tcp"+"\n")
	f.write("#"+"\n")
	NGE2_PS += 1
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE2_PS)+dum+" virtual-circuit-id "+str(ANT_vlan)+"\n")
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE2_PS)+dum+" description :r="+MPS2_name+":q=vsi_"+str(ANT_vlan)+":v=ae"+str(ae_2)+":sev=5:t""\n")
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE2_PS)+dum+" control-word"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE2_PS)+dum+" mtu 2000"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE2_PS)+dum+" encapsulation-type ethernet-vlan"+"\n")
	f.write("set protocols l2circuit neighbor "+MPS2_IP+" interface ps"+str(+NGE2_PS)+dum+" pseudowire-status-tlv hot-standby-vc-on"+"\n")
	f.write("#"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" description :r="+MPS2_name+":q=Eth-trunk"+str(ethtrunk)+dot+str(ANT_vlan)+":v="+str(lt_2)+":sev=5:t=pw:"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" anchor-point "+str(lt_2)+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" flexible-vlan-tagging"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" auto-configure vlan-ranges dynamic-profile auto-pwht accept pppoe"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" auto-configure vlan-ranges dynamic-profile auto-pwht ranges "+str(ANT_vlan)+dash+str(ANT_vlan)+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" auto-configure remove-when-no-subscribers"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" mtu 2022"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" no-gratuitous-arp-request"+"\n")
	f.write("set interfaces ps"+str(NGE2_PS)+" unit 0 encapsulation ethernet-ccc"+"\n")
	f.write("#"+"\n")
	f.write("set interfaces "+str(lt_2)+" hierarchical-scheduler implicit-hierarchy"+"\n")
	f.write("set class-of-service interfaces interface-set ps"+str(NGE2_PS)+" output-traffic-control-profile 10g-tcp"+"\n")  
	f.write("\n")
	i +=1
	NGE1_PS += 1
	NGE2_PS += 1
	f.write("########################################################################## \n")
	f.write("\n")
	
	

	
	
f.write("\n")
f.write("Please find the below Command line for verification \n")
f.write("screen-length 0 temporary \n")
f.write("display interface description | no-more \n")
f.write("display interface brief | no-more \n")
f.write("display vsi services all\n")
f.write("display vsi peer-info \n ")
f.write("\n")
f.write("\n")
j = 1
while ( j <= var ) :
	x = sheet.cell_value(j,2)
	V_ID=int(x)      
	f.write("display traffic-statistics vsi vsi_" +str(V_ID)+ "\n")
	f.write("display vsi name vsi_"+str(V_ID)+" peer-info\n")
	f.write("\n")
	f.write("\n")
	j += 1
	